Informations:   SDK: Java17
		src contient fichiertesteColon.txt, necessaire aux tests unitaires.

# üöÄ Optimisation du Partage des Ressources dans une Colonie Spatiale

Ce projet a pour objectif de d√©velopper un logiciel en Java permettant d‚Äôoptimiser la r√©partition des ressources critiques au sein d‚Äôune colonie spatiale. Apr√®s chaque mission de ravitaillement, le commandant doit attribuer ces ressources aux colons en respectant au mieux leurs pr√©f√©rences tout en minimisant les conflits interpersonnels.

L‚Äôalgorithme mis en place devra :
- Mod√©liser la colonie sous forme de graphe repr√©sentant les relations entre colons.
- Prendre en compte les pr√©f√©rences individuelles des colons concernant les ressources.
- Calculer le co√ªt d‚Äôune affectation en mesurant le niveau de jalousie entre colons.
- Trouver une r√©partition optimale minimisant ces conflits.

Ce projet s'inscrit dans le cadre d'un exercice acad√©mique de programmation avanc√©e et vise √† explorer des solutions algorithmiques efficaces pour la gestion des ressources en environnement contraint.





Informations sur le code:

-La classe main se trouve dans Conquest.Main

-Un algorithme plus efficace que le Naif fut implent√©, il r√©side en Conquest.Expedition.meuilleurResultat()
Voici l'explication de ce qu'il fait :
L‚Äôalgorithme am√©lior√© repose sur une repr√©sentation du probl√®me sous forme de graphe o√π les colons sont des n≈ìuds et leurs relations d√©testables sont des ar√™tes pond√©r√©es.
Chaque ar√™te est pond√©r√©e en fonction du degr√© de d√©testation entre deux colons.
Cela permet de mod√©liser le probl√®me comme un probl√®me de partitionnement de graphe, o√π l‚Äôobjectif est de minimiser les conflits tout en respectant les contraintes des ressources.

Dans une premi√®re √©tape, une analyse pr√©liminaire est effectu√©e pour √©valuer les pr√©f√©rences des colons et leurs relations.
Une priorit√© est donn√©e aux colons ayant le plus grand impact potentiel sur les conflits globaux (combinaison de contraintes et de pr√©f√©rences).
Cette analyse permet d‚Äô√©liminer les affectations non viables d√®s le d√©part et de limiter l‚Äôespace des solutions √† explorer.

L‚Äôalgorithme applique ensuite une m√©thode d‚Äôoptimisation par Simulated Annealing.
Cette m√©thode d√©marre avec une affectation initiale al√©atoire ou heuristique des ressources aux colons.
√Ä chaque it√©ration, une modification est apport√©e √† l‚Äôaffectation courante (par exemple, en √©changeant les ressources entre deux colons).
Si cette modification r√©duit le co√ªt global (conflits), elle est accept√©e imm√©diatement. Sinon, elle peut √™tre accept√©e avec une probabilit√© d√©croissante au fil des it√©rations, ce qui permet d‚Äô√©viter de rester bloqu√© dans un minimum local.

Enfin, pour am√©liorer encore l‚Äôaffectation, l‚Äôalgorithme utilise un processus d‚Äôoptimisation finale par Tabu Search.
Ce processus explore syst√©matiquement des √©changes locaux entre colons, tout en maintenant une liste taboue des solutions r√©cemment explor√©es pour √©viter les cycles.
Cette √©tape garantit que l‚Äôalgorithme affine la solution jusqu‚Äô√† atteindre un minimum global ou une configuration tr√®s proche de l‚Äôoptimal.

Ces √©tapes combin√©es permettent une exploration efficace de l‚Äôespace des solutions, avec une convergence rapide vers une configuration de faible co√ªt global.
L‚Äôapproche offre une meilleure performance par rapport √† l‚Äôalgorithme initial en termes de temps de calcul et de qualit√© des solutions trouv√©es.

-Toutes les fonctionalit√©es ont pu etre implement√©. Un algorithme performant est present et des tests unitaires renforcent le code de mani√®re generale. Une Javadoc complete et pouss√© fut propos√© aussi.
Ce qu'il manque est la JavaFX qui au final n'a pas pu etre faite au vu de l'organisation du groupe.
